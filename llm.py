from google import genai
from google.genai import types
import os

def process_xml_with_llm(xml_file_path: str, system_prompt_file_path: str, api_key: str) -> str:
    """
    Reads an XML file, uses its content along with a system prompt to call the
    Gemini API, and returns the generated content's text.

    Args:
        xml_file_path: The path to the XML file to be processed.
        system_prompt_file_path: The path to the file containing the system instruction.
        api_key: Your Google AI API key.

    Returns:
        The text content generated by the Gemini model.
    """
    # 1. Initialize the client
    try:
        client = genai.Client(api_key=api_key)
    except Exception as e:
        return f"Error initializing Gemini client: {e}"

    # 2. Read the XML file content
    try:
        with open(xml_file_path, "r") as f:
            xml_text = f.read()
    except FileNotFoundError:
        return f"Error: XML file not found at path: {xml_file_path}"
    except Exception as e:
        return f"Error reading XML file: {e}"

    # 3. Read the system prompt
    try:
        with open(system_prompt_file_path, "r") as f:
            system_instruction = f.read()
    except FileNotFoundError:
        return f"Error: System prompt file not found at path: {system_prompt_file_path}"
    except Exception as e:
        return f"Error reading system prompt file: {e}"

    # 4. Call the Gemini API
    try:
        result = client.models.generate_content(
            model="gemini-2.5-flash",
            config=types.GenerateContentConfig(
                thinking_config=types.ThinkingConfig(thinking_budget=0),
                system_instruction=system_instruction
            ),
            contents=[
                xml_text,
                "\n\n",
                "follow the rules",
            ],
        )
        return result.text
    except Exception as e:
        return f"Error during Gemini API call: {e}"
 

xml_path = "/home/ady/prjs/hh/Nasa_NLP/xmls/l.xml"
prompt_path = "system_prompt.txt"
api_key_placeholder = "AIzaSyAI5vjdiSoBoGNQzXgaKtrn-4xhg1lMbmo" 

result_text = process_xml_with_llm(xml_path, prompt_path, api_key_placeholder)

print(result_text)